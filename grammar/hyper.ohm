HYPER {
    Program     = newline* Statement+ newline*                      --program 
    Statement   = SimpleStmt newline                                --simple
                | Loop 
                | Conditional 
                | Function 
    SimpleStmt  = Assignment "!"                                    -- assignment
                | Declaration "!"                                   -- declaration
                | sAY Exp "!"                                       -- print
                | gIMME Exp? "!"                                  -- return
                | lEAVE "!"                                       -- break
                | Exp "!"                                           -- Expression
    Suite       = ":" SimpleStmt newline                            -- small
                | ":" newline indent Statement+ dedent              -- complex
    Exp         = Exp logop Exp1                                    -- logical
                | Exp1
    Exp1        = Exp2 relop Exp2                                   -- binary
                | Exp2
    Exp2        = Exp2 addop Exp3                                   -- binary
                | Exp3
    Exp3        = Exp3 mulop Exp4                                   -- binary
                | Exp4
    Exp4        = prefixop Exp5                                     -- negate
    			| Exp5 powop Exp4									-- pow
                | Exp5
    Exp5        = boollit
                | numlit
                | strlit
                | nonelit
                | Array
                | Dictionary
                | Tuple
                | Call
                | VarExp
                | Range 
                | "(" Exp ")"                                       -- parens
                
    Loop        = For | While           
    For         = lOOKAT Type id in Exp Suite                   -- for
    While       = uNTIL Exp Suite                                 -- while
    Conditional = tRY Exp Suite
                  (nOTRY Exp Suite)* 
                  (nOQQQ Suite)?                                  -- if
    Function    = fUNC (Type | vOID) id "(" Params ")" Suite    -- function
    Array       = "[" Exps "]"
    Dictionary  = "{" ListOf<KeyValue, ","> "}"
    Tuple       = "(" NonemptyListOf<Exp5, ","> ")"
    Call        = VarExp "(" ListOf <Arg, ","> ")"
    VarExp      = VarExp "[" Exp "]"                                -- brackets
                | VarExp "." id                                     -- dot
                | id                                                -- simple
    Range       = "....." ("(" | "[") RangeType "," RangeType ("," RangeType)? ("]" | ")")
    Params      =  ListOf<Param, ",">
    Param       = Type id ( is Exp )?                              -- param
    Assignment  = id is Exp                                       -- assign
    Declaration = Type id  (is Exp)?                                 -- decl
    id          = ~keyword (letter | "_") idrest*
    idrest      =  "_" | alnum
    Arg         = Exp 
    prefixop    = "-" | "~" 
    powop		= "POW"
    logop       = "OR" | "AND"
    relop       = relop_adv
                | relop_sim
    relop_adv   = "LESSEQ"
                | "EQUALS" 
                | "NOTEQ" 
                | "GRTEQ" 
    relop_sim   = "LESS" | "GRT"
    mulop       = "MULT" | "DIV" | "MOD"
    addop       = "ADD" | "SUB"
    
    boollit     = "TRUE" | "FALSE"
    numlit      = digit+ ("." digit+)?
    strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
    nonelit     = "LITERALLYNOTHING"
    Exps        = ListOf<Exp, ",">
    KeyValue    = Key ":" Exp
    Key         = boollit
                |  numlit
                |  strlit
                |  nonelit
                |  VarExp
                
    sAY         = "SAY" ~alnum
    gIMME       = "GIMME" ~alnum
    lEAVE       = "LEAVE" ~alnum
    lOOKAT      = "LOOKAT" ~alnum
    uNTIL       = "UNTIL" ~alnum
    tRY         = "TRY" ~alnum
    nOTRY       = "NO?TRY" ~alnum
    nOQQQ       = "NO???" ~alnum
    in          = "IN" ~alnum
    fUNC        = "FUNC" ~alnum
    vOID        = "VOID" ~alnum
    is          = "IS" ~alnum
    
    
    keyword     = (basicType | "UNTIL" | "TRY" | "NO?TRY" | "NO???"
                | "LOOKAT" | "GIMME" | "LEAVE" |"TUP" 
                | "ARR" | "DICT"| "FUNC"  | "RANGE" | "range") ~idrest       
    Type        = basicType | "TUP" | "ARR" | "DICT"
                | "FUNC"  | "range" 
    basicType   = "BOO" 
                | "INT" 
                | "FLT" 
                | "STR" 
                | "LITERALLYNOTHING"
    RangeType   = VarExp 
                | Exp
                
    escape      = "\\" ("\\" | "\"" | "n")                           -- simple
                | "\\u{" hexDigit+ "}"                               -- codepoint
    newline     = "\n"+
    indent      = "⇨"
    dedent      = "⇦"        
    space       := " " | "\t" | comment
    comment     = "!!!" (~"\n" any)* "\n"                            -- singleLine
                | "!?" (~"?!" any)* "!?"                             -- multiLine  
}