⋮
HYPER {
    Program     = Block     --program 
    Block       = Statement+
    Suite       = ":" SimpleStmt newline        --small
                | ":" newline indent Statement+ dedent  --complex
    Statement   = SimpleStmt    --simple
                | Loop 
                | Conditional 
                | Function 
   
    SimpleStmt  = Assignment "!"                -- assignment
                | Declaration "!"               -- declaration
                | "SAY" Exp "!"                 -- print
                | "GIMME" Exp? "!"               -- return
                | "LEAVE" "!"                   -- break
                | Exp "!"                       -- Expression
    
    Exp         = Exp logop Exp1        -- logical
                | Exp1
    Exp1        = Exp1 relop Exp2       -- binary
                | Exp2
    Exp2        = Exp2 addop Exp3       -- binary
                | Exp3
    Exp3        = Exp3 mulop Exp4       -- binary
                | Exp4
    Exp4        = prefixop Exp5         -- negate
                | Exp5
    Exp5        = Exp7 suffixop         -- increment
                | Exp6
    Exp6        = Exp7 "**" Exp6        -- pow
                | Exp7
    Exp7        = boollit
                | numlit
                | strlit
                | nonelit
                | Array
                | Dictionary
                | Tuple
                | Call
                | VarExp
                | Range 
                | "(" Exp ")"           -- parens
                
                
    Loop        = For | While           
    For         = "LOOKAT" type id "IN" Exp Suite       -- for
    While       = "GOOOO" "(" Exp ")" ":" Suite         -- while
    Conditional = "TRY" Exp Suite
                  ("NO?TRY" Exp Suite)* 
                  ("NO???" Exp Suite)?                  -- if
    Function 	= "FUNC" (type | "void") id "(" Params ")" Suite  -- function
    Array		=
    Dictionary	=
    Tuple		= 
    Call 		= 
    VarExp		=
    Range		= 
    Params      =  ListOf<Param, ",">
    Param 		= id ( "=" Exp )?					-- param
    Assignment  = type id "IS" Exp 					-- assign
    Declaration	= type id 							-- decl
    id 			= ~keyword (letter | "_") (alnum | "_")*
    
    
    prefixop	= "-" | "!" 
    suffixop	= "++" | "--"
    logop       = "OR" | "AND"
    relop       = relop_adv
                | relop_sim
    relop_adv   = "LESSEQ"
                | "ISEQ" 
                | "NOTEQ" 
                | "GRTEQ" 
    relop_sim   = "LESS" | "GRT"
    mulop       = "MULT" | "DIV" | "MOD"
    addop		= "ADD" | "SUB"
    
    boollit 	= 
    numlit		=
   	strlit		= 
    nonelit		= 
    
   	keyword 	= (type | "GOOOO" | "TRY" | "NO?TRY" | "NO???"
    			| "LOOKAT" | "SAY" | "GIMME" | "LEAVE")
	type		= basicType | "TUP" | "ARR" | "DICT"
                | "FUNC"  | "RANGE" 
    basicType	= "BOO" 
    			| "INT" 
                | "FLT" 
                | "STR" 
                | "LITERALLYNOTHING"
    newline		= "\n"+
    indent 		= "⇨"
    dedent		= "⇦"        
    space       += comment
    comment     = "!!!" (~"\n" any)* "\n"                            -- singleLine
                | "!?" (~"?!" any)* "!?"                             -- multiLine  
}