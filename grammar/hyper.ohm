HYPER {
    Program     = Block 
    Block       = newline* Statement+ newline*
    Statement   = SimpleStmt newline                                --simple
                | Loop
                | Conditional
                | Function
    SimpleStmt  = Assignment
                | Declaration
                | say "(" Exps ")" "!"                              -- print
                | gimme Exp? "!"                                    -- return
                | leave "!"                                         -- break
                | Exp
    Suite       = ":" SimpleStmt newline                            -- small
                | ":" newline indent Statement+ dedent              -- complex
    Exp         = Exp logop Exp1                                    -- binary
                | Exp1
    Exp1        = Exp2 relop Exp2                                   -- binary
                | Exp2
    Exp2        = Exp2 addop Exp3                                   -- binary
                | Exp3
    Exp3        = Exp3 mulop Exp4                                   -- binary
                | Exp4
    Exp4        = prefixop Exp5                                     -- negate
                | Exp5 powop Exp4                                   -- pow
                | Exp5
    Exp5        = boollit
                | numlit
                | strlit
                | nonelit
                | Array
                | Dictionary
                | Tuple
                | Call
                | VarExp
                | Range
                | "(" Exp ")"                                       -- parens

    Loop        = lookat Type id in Exp Suite                       -- for
                | until Exp Suite                                   -- while
    Conditional = try Exp Suite
                  (notry Exp Suite)*
                  (noqqq Suite)?                                    -- if
    Function    = func (Type | void) id "(" Params ")" Suite
    Array       = "[" ListOf<Exps, ","> "]"
    Dictionary  = "{" ListOf<KeyValue, ","> "}"
    Tuple       = "(" NonemptyListOf<literals, ","> ")"
    Call        = VarExp "(" ListOf <Exp, ","> ")"
    VarExp      = VarExp "[" Exp "]"                                -- subscripted
                | VarExp "." id                                     -- field
                | id                                                -- id
    Range       = range ("(" | "[") RangeType "," RangeType ("," RangeType)? ("]" | ")")
    Params      = ListOf<Param, ",">
    Param       = Type id ( is Exp )?
    Assignment  = VarExp is Exp "!"
    Declaration = Type id  (is Exp)? "!"
    id          = ~keyword (letter | "_") idrest*
    idrest      =  "_" | alnum
    prefixop    = "-" | "~"
    powop		= "POW"
    logop       = "OR" | "AND"
    relop       = relop_adv
                | relop_sim
    relop_adv   = "LESSEQ"
                | "EQUALS"
                | "NOTEQ"
                | "GRTEQ"
    relop_sim   = "LESS" | "GRT"
    mulop       = "MULT" | "DIV" | "MOD"
    addop       = "ADD" | "SUB"

    literals    = boollit | numlit | strlit
    boollit     = "TRUE" | "FALSE"
    numlit      = floatlit | intlit
    intlit      = "-"? digit+
    floatlit    = "-"? digit+ "." digit+
    strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
    nonelit     = "LITERALLYNOTHING"
    Exps        = ListOf<Exp, ",">
    KeyValue    = Key ":" Exp
    Key         = boollit
                | numlit
                | strlit
                | nonelit
                | VarExp

    say         = "SAY" ~alnum
    gimme       = "GIMME" ~alnum
    leave       = "LEAVE" ~alnum
    lookat      = "LOOKAT" ~alnum
    until       = "UNTIL" ~alnum
    try         = "TRY" ~alnum
    notry       = "NO?TRY" ~alnum
    noqqq       = "NO???" ~alnum
    in          = "IN" ~alnum
    func        = "FUNC" ~alnum
    void        = "VOID" ~alnum
    is          = "IS" ~alnum
    range       = "RANGE" ~alnum

    keyword     = (basicType | "UNTIL" | "TRY" | "NO?TRY" | "NO???"
                | "LOOKAT" | "GIMME" | "LEAVE" |"TUP"
                | "ARR" | "DICT"| "FUNC"  | "RANGE" ) ~idrest
    Type        = basicType | TupleType | ArrayType | DictType
                | "FUNC"  | "RANGE"
    basicType   = "BOO"
                | "INT"
                | "FLT"
                | "STR"
                | "LITERALLYNOTHING"
    DictType    = "DICT<" basicType ":" basicType ">"
    TupleType   = "TUP<" NonemptyListOf<Type, ","> ">"
    ArrayType   = "ARR<" basicType ">"
    RangeType   = VarExp
                | Exp

    escape      = "\\" ("\\" | "\"" | "n")                           -- simple
                | "\\u{" hexDigit+ "}"                               -- codepoint
    newline     = "\n"+
    indent      = "⇨"
    dedent      = "⇦"
    space       := " " | "\t" | comment
    comment     = "!!!" (~"\n" any)* "\n"                            -- singleLine
                | "!?" (~"?!" any)* "?!"                             -- multiLine
}
