HYPER {
    Program     = newline* Body newline*
    Body        = newline* indent Body dedent
    Statement   = id "IS" Exp "!"                                           -- assignment
                | Declaration "!"                                    -- declaration
                | "SAY" Exp "!"                                      -- print
                | "GIMME" Exp "!"                                    -- return
                | "LEAVE" "!"                                        -- break
                | Function 										     -- function
                | If  											     -- if statment
                | Loop 						                         -- loop
                | Exp "!"                                            -- Expression
    Function    = "FUNC" id ListOf<Parameter, ","> ":" Block         -- declaration
    If          = "TRY" "(" Exp ")" Block
                  ("NO?TRY" "(" Exp ")" Block)*
                  ("NO???" Block)?
    Loop        = ("KEEPGOING" ListOf<Statement_assignment, ","> ":"
                  (Exp) "!"
                  (Statement_reassignment|Exp4_increment)")" Block)  -- for
                | "GOOOO" "(" Exp ")" ":" Block                          -- while
    Exp         = Exp logOp Exp1                                     -- logical
                | Exp1
    Exp1        = Exp1 relOp Exp1                                    -- relative
                | Exp2
    Exp2        = Exp2 addop Exp3                                    -- addition
                | Exp3
    Exp3        = Exp3 mulOp Exp4                                    -- multiplication
                | Exp4
    Exp4        = Exp6 sufixOp                                       -- increment
                | Exp5
    Exp5        = (PropAccess | id) "(" ListOf<Exp, ","> ")"         -- fCall
                | PropAccess
                | "[" ListOf<Exp, ","> "]"                           -- ArrayExpression
                | Exp6
    Exp6        = VarExp
                | numlit
                | stringlit
                | boolean
                | PropAccess
                | Object
                | null
                | Paren_Exp
    PropAccess  = VarExp "[" Exp "]"                                 -- brackets
                | VarExp "." id                                      -- dot
    comment     = "!!!" (~"\n" any)* "\n"                            -- singleLine
                | "!?" (~"?!" any)* "!?"                             -- multiLine
    logOp       = "OR" | "AND"
    relOp       = relOp_adv
                | relOp_sim
    relOp_adv   = "LESSEQ"
                | "ISEQ" 
                | "NOTEQ" 
                | "GRTEQ" 
    relOp_sim   = "LESS" | "GRT"
    mulOp       = "MULT" | "DIV" | "MOD"
    sufixOp     = "++" | "--"
    addop       = "ADD" | "SUB"
    Type        =  ( IntType | FloatType | StringType | BooleanType | ArrayType | TupleType | NoneType )
  	IntType     =  "INT"
    FLoatType	=  "FLT"
  	StringType  =  "STR"
  	BooleanType =  "BOO"
  	ArrayType   =  "ARR<" Type ">"
  	TupleType   =  "TUP<" Type ">"
  	NoneType    =  "LITERALLYNOTHING"
  	keyword     =  ("GOOOO" | "TRY" | "NO?TRY" | "NO???" | "GIMME" | "LEAVE" | "AND" | "OR" | "IS"
              	|  "NOT" | "TRUE" | "FALSE" | "KEEPGOING" | "from" | "to" | "by" | "equals") ~idrest
    id          = ~keyword letter idrest*
    idrest      = "_" | alnum
    stringlit   = "\"" (~("\""|"\n") any)* "\""
    intlit      = "-"? digit+
    declit      = "-"? digit+ "." digit*
    numlit      = declit | intlit
    boolean     = "TRUE" | "FALSE"
    null        = "temp"
    space       += comment
    access      = "CONSTANT_VARIABLE" | "LOCAL_VARIABLE" | "GLOBAL_VARIABLE"
    Parameter   = Type "@" id
    Object      = "#" ListOf<Property, ","> "#"
    Property    = Field | Method
    Field       = Type "@" id "~" Exp
    Method      = Function
    Paren_Exp   = "(" Exp ")"
}

// HYPER 2.0
HYPER {
	Program 	= Block   	--program 
    Block		= Statement+
    Suite 		= ":" SimpleStmt newline		--small
    			| ":" newline indent Statement+ dedent	--complex
    Statement	= SimpleStmt	--simple
    			| Loop 
                | Conditional 
                | Function 
   
   	SimpleStmt 	= Type id "IS" Exp "!" 			-- assignment
    			| Declaration "!"               -- declaration
                | "SAY" Exp "!"                 -- print
                | "GIMME" Exp "!"               -- return
                | "LEAVE" "!"                   -- break
                | Exp "!" 						-- Expression
    
    Exp 		= Exp "OR" Exp1			-- or
    			| Exp "AND" Exp1 		-- and
                | Exp1
    Exp1		= Exp1 relop Exp2		-- binary
    			| Exp2
    Exp2		= Exp2 addop Exp3		-- binary
    			| Exp3
    Exp3		= Exp3 mulop Exp4		-- binary
    			| Exp4
    Exp4		= prefixop Exp5
    			| Exp5
    Exp5 		= Exp6 "**" Exp5		-- pow
    			| Exp6
    Exp6		= boollit
    			| numlit
                | strlit
                | nonelit
                | "(" Exp ")"
                | Array
                | Dictionary
                | Tuple
                | Range 
                
    Loop        = For | While
                
	For			= "LOOKAT" Type id "IN" Exp Suite 		-- for
    While		= "GOOOO" "(" Exp ")" ":" Suite         -- while
    Conditional = "TRY" Exp Suite
    			  ("NO?TRY" Exp Suite)* 
                  ("NO???" Exp Suite)?					-- if
    Function 	= "FUNC" (Type | "void") id "(" Params ")" Suite  -- function
    Params      =  ListOf<Param, ",">
    Param 		= id ( "=" Exp )?					-- param
                
    logOp       = "OR" | "AND"
    relOp       = relOp_adv
                | relOp_sim
    relOp_adv   = "LESSEQ"
                | "ISEQ" 
                | "NOTEQ" 
                | "GRTEQ" 
    relOp_sim   = "LESS" | "GRT"
    mulOp       = "MULT" | "DIV" | "MOD"
    newline		= "\n"+
    indent 		= "⇨"
    dedent		= "⇦"
    
	Type		= "BOO" | "INT" | "FLT" 
    			| "STR" | "TUP" | "ARR" | "DICT"
                | "FUNC" | "LITERALLYNOTHING" 
                
    space       += comment
    comment     = "!!!" (~"\n" any)* "\n"                            -- singleLine
                | "!?" (~"?!" any)* "!?"                             -- multiLine
         
   
}